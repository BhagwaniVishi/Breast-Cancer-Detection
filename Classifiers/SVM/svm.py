# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12rlbw-HLC03N171RMXnVGUXAt9k3_mZn

Linear SVM
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load data from CSV files
class_0_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_adenosis.csv')
class_1_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_fibroadenoma.csv')
class_2_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_phyllodes_tumor.csv')
class_3_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_tubular_adenoma.csv')
class_4_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_ductal_carcinoma.csv')
class_5_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_lobular_carcinoma.csv')
class_6_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_mucinous_carcinoma.csv')
class_7_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_papillary_carcinoma.csv')

# Add labels to the data
class_0_data['label'] = 0
class_1_data['label'] = 1
class_2_data['label'] = 2
class_3_data['label'] = 3
class_4_data['label'] = 4
class_5_data['label'] = 5
class_6_data['label'] = 6
class_7_data['label'] = 7

# Combine the data from all classes
data = pd.concat([class_0_data, class_1_data, class_2_data, class_3_data, class_4_data, class_5_data, class_6_data, class_7_data])

# Separate features and labels
X = data.drop('label', axis=1)
y = data['label']

# Check for any missing values and handle them if necessary
if X.isnull().sum().sum() > 0:
    X = X.fillna(X.mean())

# Remove non-numeric columns
X = X.select_dtypes(include=[float, int])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the SVM classifier
svm = SVC(kernel='
')  # You can also try 'rbf', 'poly', etc.
svm.fit(X_train, y_train)

# Make predictions
y_pred = svm.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Generate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

# Plot confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Class 0', 'Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6', 'Class 7'], yticklabels=['Class 0', 'Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6', 'Class 7'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""SVM from chatgpt

"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import GridSearchCV

# Load data from CSV files
class_0_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_adenosis.csv')
class_1_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_fibroadenoma.csv')
class_2_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_phyllodes_tumor.csv')
class_3_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_tubular_adenoma.csv')
class_4_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_ductal_carcinoma.csv')
class_5_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_lobular_carcinoma.csv')
class_6_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_mucinous_carcinoma.csv')
class_7_data = pd.read_csv('/home/2321201101/Vgg16/40x/vgg16_40x_papillary_carcinoma.csv')

# Add labels to the data
class_0_data['label'] = 0
class_1_data['label'] = 1
class_2_data['label'] = 2
class_3_data['label'] = 3
class_4_data['label'] = 4
class_5_data['label'] = 5
class_6_data['label'] = 6
class_7_data['label'] = 7

# Combine the data from all classes
data = pd.concat([class_0_data, class_1_data, class_2_data, class_3_data, class_4_data, class_5_data, class_6_data, class_7_data])

# Separate features and labels
X = data.drop('label', axis=1)
y = data['label']

# Check for any missing values and handle them if necessary
if X.isnull().sum().sum() > 0:
    X = X.fillna(X.mean())

# Remove non-numeric columns
X = X.select_dtypes(include=[float, int])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define the parameter grid for hyperparameter tuning
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [1, 0.1, 0.01, 0.001],
    'kernel': ['rbf']
}

# Create a GridSearchCV object
grid = GridSearchCV(SVC(), param_grid, refit=True, verbose=2, cv=5)

# Fit the model
grid.fit(X_train, y_train)

# Print the best parameters found by GridSearchCV
print("Best parameters found: ", grid.best_params_)

# Make predictions using the best model
y_pred = grid.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Generate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

# Plot confusion matrix
class_labels = ['Class 0', 'Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5', 'Class 6', 'Class 7']
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

i=0
for c in range(-18, 28, 2):
  for g in range(-18, 20, 2):
    svc_model=SVC(C=pow(2, c), gamma=pow(2, g), kernel='rbf', decision_function_shape='ovr', random_state=42)
    svc_model.fit(X_train, y_train)

    predictions=svc_model.predict(X_test)

    print('test i: '+str(i), ', c:'+str(c), ', acc:'+str(accuracy_score(y_test, predictions)))
    dftestresult.loc[i, [['C']]]=c
    dftestresult.loc[i, [['gamma']]]=g
    dftestresult.loc[i, [['Acc']]]=accuracy_score(y_test, predictions)

    i=i+1
file_name1=path+'_f' +str(foldnum)+'_result.xlsx'
dftestresult.to_excel(file_name1)

print('saved tunning_f' +str(foldnum)+ '_result.xlx')

"""SVM"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Load data from CSV files
class_0_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_adenosis.csv')
class_1_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_fibroadenoma.csv')
class_2_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_phyllodes_tumor.csv')
class_3_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_tubular_adenoma.csv')
class_4_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_ductal_carcinoma.csv')
class_5_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_lobular_carcinoma.csv')
class_6_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_mucinous_carcinoma.csv')
class_7_data = pd.read_csv('/content/drive/MyDrive/Breakhis_dataset/Feature_extractions/Vgg16/40x/vgg16_40x_papillary_carcinoma.csv')

# Add labels to the data
class_0_data['label'] = 0
class_1_data['label'] = 1
class_2_data['label'] = 2
class_3_data['label'] = 3
class_4_data['label'] = 4
class_5_data['label'] = 5
class_6_data['label'] = 6
class_7_data['label'] = 7

# Combine the data from all classes
data = pd.concat([class_0_data, class_1_data, class_2_data, class_3_data, class_4_data, class_5_data, class_6_data, class_7_data])

# Separate features and labels
X = data.drop('label', axis=1)
y = data['label']

# Check for any missing values and handle them if necessary
if X.isnull().sum().sum() > 0:
    X = X.fillna(X.mean())

# Remove non-numeric columns
X = X.select_dtypes(include=[float, int])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create a DataFrame to store results
dftestresult = pd.DataFrame(columns=['C', 'gamma', 'Acc'])

# Grid search parameters
i = 0
for c in range(-18, 28, 2):
    for g in range(-18, 20, 2):
        # Create and train the SVM model
        svc_model = SVC(C=pow(2, c), gamma=pow(2, g), kernel='rbf', decision_function_shape='ovr', random_state=42)
        svc_model.fit(X_train, y_train)

        # Make predictions and calculate accuracy
        predictions = svc_model.predict(X_test)
        acc = accuracy_score(y_test, predictions)

        # Store results
        dftestresult.loc[i, 'C'] = pow(2, c)
        dftestresult.loc[i, 'gamma'] = pow(2, g)
        dftestresult.loc[i, 'Acc'] = acc

        # Print results
        print(f'Test i: {i}, C: {pow(2, c)}, gamma: {pow(2, g)}, Acc: {acc}')
        i += 1

# Save results to Excel
file_name1 = '/content/drive/MyDrive/Breakhis_dataset/foldnum_result.xlsx'
dftestresult.to_excel(file_name1, index=False)

print(f'Saved tuning results to {file_name1}')

# Create surface plots for C and gamma
# Pivot DataFrame for plotting
pivot_table = dftestresult.pivot('gamma', 'C', 'Acc')

# Create surface plot
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')

# Define grid
C_grid, gamma_grid = np.meshgrid(pivot_table.columns, pivot_table.index)
acc_grid = pivot_table.values

# Plot surface
surf = ax.plot_surface(C_grid, gamma_grid, acc_grid, cmap='viridis', edgecolor='none')
ax.set_xlabel('C')
ax.set_ylabel('Gamma')
ax.set_zlabel('Accuracy')
ax.set_title('Surface Plot of Accuracy vs. C and Gamma')

# Add color bar
fig.colorbar(surf)

plt.show()